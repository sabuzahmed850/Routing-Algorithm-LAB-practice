#include <bits/stdc++.h>
using namespace std;

class Graph {
public:
    int V; 
    vector<vector<pair<int, int>>> adj;
    Graph(int V) {
        this->V = V;
        adj.resize(V);
    }

    // Convert character to index (e.g., 'A' -> 0, 'B' -> 1, ...)
    int charToIndex(char c) {
        return c - 'A';
    }

    void addEdge(char u, char v, int weight) {
        int uIndex = charToIndex(u);
        int vIndex = charToIndex(v);
        adj[uIndex].push_back({vIndex, weight});
        adj[vIndex].push_back({uIndex, weight});  // For undirected graph
    }

    void dijkstra(char src) {
        int srcIndex = charToIndex(src);
        vector<int> dist(V, INT_MAX); 
        dist[srcIndex] = 0;  
        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;
        pq.push({0, srcIndex});  

        while (!pq.empty()) {
            int u = pq.top().second;  // Vertex with the smallest distance
            int d = pq.top().first;   // Current distance
            pq.pop();

            // If the current distance is greater than the stored distance, skip it
            if (d > dist[u]) {
                continue;
            }

            // Traverse all adjacent vertices of u
            for (auto &neighbor : adj[u]) {
                int v = neighbor.first;
                int weight = neighbor.second;

                // Relax the edge if a shorter path is found
                if (dist[u] + weight < dist[v]) {
                    dist[v] = dist[u] + weight;
                    pq.push({dist[v], v});
                }
            }
        }

        // Output the shortest distances from the source
        cout << "Shortest distances from vertex " << src << ":\n";
        for (int i = 0; i < V; ++i) {
            if (dist[i] == INT_MAX) {
                cout << char(i + 'A') << ": INF\n";  // Convert index back to character
            } else {
                cout << char(i + 'A') << ": " << dist[i] << endl;  // Convert index to character
            }
        }
    }
};

int main() {
    int V, E; cin >> V;   cin >> E;

    Graph g(V);
    for (int i = 0; i < E; ++i) {
        char u, v;
        int weight;
        cin >> u >> v >> weight;  // Input in the format u v weight
        g.addEdge(u, v, weight);
    }

    char source;
    cin >> source;

    g.dijkstra(source);  // Find the shortest paths from the source

    return 0;
}

Input: 
 4
5
A B 12
B C 1
C D 2
D A 4
A C 9
D
Output
Shortest distances from vertex D:
A: 4
B: 3
C: 2
D: 0
