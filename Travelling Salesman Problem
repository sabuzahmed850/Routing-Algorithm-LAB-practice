#include <bits/stdc++.h>
#include <vector>
#include <algorithm> 
#include <limits.h>  
using namespace std;
int travellingSalesmanProblem(vector<vector<int>> &graph, int start, int V) {
    vector<int> vertices;
    for (int i = 0; i < V; i++) {
        if (i != start) {
            vertices.push_back(i);
        }
    }
    int min_path = INT_MAX;
    do {
        int current_path_weight = 0;
        int k = start;
        for (int i = 0; i < vertices.size(); i++) {
            current_path_weight += graph[k][vertices[i]];
            k = vertices[i];
        }
        current_path_weight += graph[k][start];
        min_path = min(min_path, current_path_weight);

    } while (next_permutation(vertices.begin(), vertices.end()));

    return min_path;
}

int main() {
    int V, start;
    cin >> V;
    vector<vector<int>> graph(V, vector<int>(V));
    for (int i = 0; i < V; i++) {
        for (int j = 0; j < V; j++) {
            cin >> graph[i][j];
        }
    }
    cin >> start;
    int result = travellingSalesmanProblem(graph, start, V);
    cout << "The minimum cost of visiting all vertices is: " << result << endl;

    return 0;
}

/*
Enter the number of vertices: 4
Enter the adjacency matrix (use large values for no edge):
0 10 15 20
10 0 35 25
15 35 0 30
20 25 30 0
Enter the starting vertex: 0
*/
