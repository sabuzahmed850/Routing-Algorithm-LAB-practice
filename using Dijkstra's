#include <bits/stdc++.h>
#include <vector>
#include <limits.h> 
using namespace std;
int miniDistance(int dist[], bool visited[], int V) {
    int min = INT_MAX, min_index;
    for (int v = 0; v < V; v++) {
        if (!visited[v] && dist[v] <= min) {
            min = dist[v];
            min_index = v;
        }
    }
    return min_index;
}
void printDistances(int dist[], int V) {
    cout << "Vertex   Distance from Source" << endl;
    for (int i = 0; i < V; i++) {
        cout << i << " \t " << dist[i] << endl;
    }
}
void dijkstra(vector<vector<int>> &graph, int src, int V) {
    int dist[V];      
    bool visited[V];  
    for (int i = 0; i < V; i++) {
        dist[i] = INT_MAX;
        visited[i] = false;
    }
    dist[src] = 0;

    // Main algorithm loop
    for (int count = 0; count < V - 1; count++) {
        int u = miniDistance(dist, visited, V);
        visited[u] = true;

        for (int v = 0; v < V; v++) {
            if (!visited[v] && graph[u][v] && dist[u] != INT_MAX && dist[u] + graph[u][v] < dist[v]) {
                dist[v] = dist[u] + graph[u][v];
            }
        }
    }

    // Print the result
    printDistances(dist, V);
}

int main() {
    int V;
    cin >> V;

    // Input the adjacency matrix
    vector<vector<int>> graph(V, vector<int>(V));
    for (int i = 0; i < V; i++) {
        for (int j = 0; j < V; j++) {
            cin >> graph[i][j];
        }
    }

    int src;
    cin >> src;

    // Run Dijkstra's algorithm
    dijkstra(graph, src, V);

    return 0;
}
/*
4
0 1 4 0
1 0 4 2
4 4 0 5
0 2 5 0
0

Vertex   Distance from Source
0 	 0
1 	 1
2 	 4
*/
